require 'dxopal'
include DXOpal

img_bar   = Image.new(100, 20, C_WHITE)
img_hwall = Image.new(20, 480, C_BLUE)
img_vwall = Image.new(640, 20, C_BLUE)
img_ball  = Image.new(20, 20).circle_fill(10, 10, 10, C_RED)
img_block = Image.new(58, 18, C_GREEN)
img_block_y = Image.new(58, 18, C_YELLOW)

bar   = Sprite.new(0, 460, img_bar)
lwall = Sprite.new(0, 0, img_hwall)
rwall = Sprite.new(620, 0, img_hwall)
twall = Sprite.new(0, 0, img_vwall)

walls = [bar, lwall, rwall, twall]

ball = Sprite.new(300, 400, img_ball)
dx =  2
dy = -2

def move(sprite, speed_x, speed_y)
  sprite.x += speed_x
  sprite.y += speed_y
end

blocks = []
10.times do |x|
  5.times do |y|
    blocks << Sprite.new(21 + 60 * x, 21 + 20 * y, img_block)
  end
end
font = Font.new(24)

Window.load_resources do
  Window.loop do
    bar.x = Input.mouse_pos_x
    Sprite.draw(walls)
    move(ball, dx, 0)
    if ball === walls
      ball.x -= dx
      dx = -dx
    end
    coll_x = ball.check(blocks)
    if coll_x[0]
      coll_x[0].image = img_block_y
      coll_x[0].draw
      coll_x[0].vanish
      ball.x -= dx
      dx = -dx
    end
    move(ball, 0, dy)
    if ball === walls
      ball. y -= dy
      dy = -dy
    end
    coll_y = ball.check(blocks)
    if coll_y[0]
      coll_y[0].image = img_block_y
      coll_y[0].draw
      coll_y[0].vanish
      ball. y -= dy
      dy = -dy
    end
    ball.draw
    Sprite.draw(blocks)
    Sprite.clean(blocks)
    string = "残りブロックは #{blocks.size}個です。"
    puts string
    Window.draw_font(20, 200, string, font, {:color => C_YELLOW})
  end
end

# ブロッック崩し
#--------------------------------------------------------------
# Sprite + Class版
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
require 'dxruby'

# 棒
class Bar < Sprite
  def initialize(x = 0, y = 460)
    self.x = x
    self.y = y
    self.image = Image.new(100,  20, C_WHITE)
  end
  def update
    self.x = Input.mouse_pos_x
  end
end


# 壁
class Walls < Array
  def initialize
    self << Wall.new(  0, 0,  20, 480)   # 左側
    self << Wall.new(  0, 0, 640,  20)   # 上側
    self << Wall.new(620, 0,  20, 480)   # 右側
  end
  def draw
    Sprite.draw(self)
  end
end

class Wall < Sprite
  def initialize(x, y, dx, dy)
    self.x = x
    self.y = y
    self.image = Image.new(dx, dy, C_WHITE)
  end
end


# ブロック
class Blocks < Array
  def initialize
    colors = [C_BLUE, C_YELLOW, C_WHITE, C_RED, C_GREEN]
    5.times do |y|
      10.times do |x|
        self << Block.new(21 + 60 * x , 21 + 20 * y, colors[y])
      end
    end
  end
  def draw
    self.each do |b|
      b.draw
    end
  end
end

class Block < Sprite
  def initialize(x, y, c)
    self.x = x
    self.y = y
    self.image = Image.new(58, 18, c)
  end
end


# ボール
class Ball < Sprite
  def initialize(x = 300, y = 400)
    self.x = x
    self.y = y
    self.image = Image.new(20, 20).circle_fill(10, 10, 10, C_WHITE)
    @dx =  4
    @dy = -4
  end

  def update(walls, bar, blocks)

    # 横方向への移動
    self.x += @dx

    # 壁または棒に衝突
    if self === walls or self === bar
      self.x -= @dx
      @dx    *= -1
    end

    # ブロックに衝突
    hit = self.check(blocks).first
    if hit != nil
      hit.vanish
      self.x -= @dx
      @dx    *= -1
    end

    # 縦方向への移動
    self.y += @dy

    # 壁または棒に衝突
    if self === walls or self === bar
      self.y -= @dy
      @dy    *= -1
    end

    # ブロックに衝突
    hit = self.check(blocks).first
    if hit != nil
      hit.vanish
      self.y -= @dy
      @dy    *= -1
    end

  end
end


# ブロック崩しゲーム
class Game
  def initialize
    @walls  = Walls.new    # 壁
    @bar    = Bar.new      # 棒
    @ball   = Ball.new     # ボール
    @blocks = Blocks.new   # ブロック
  end

  def play
    Window.loop do
      @walls.draw
      @bar.update
      @bar.draw
      @ball.update(@walls, @bar, @blocks)
      @ball.draw
      @blocks.draw

      break if Input.key_push?(K_ESCAPE)
    end
  end
end



#
# メイン
#
game = Game.new   # ゲーム初期化
game.play         # ゲーム開始